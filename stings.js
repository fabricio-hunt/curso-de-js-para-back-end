/*Strings s√£o sequ√™ncias de caracteres alfanum√©ricos (letras, n√∫meros e/ou s√≠mbolos) amplamente usadas em programa√ß√£o. Em JavaScript,
 uma string sempre estar√° entre aspas. Podemos declar√°-las com aspas duplas (") ou simples ('). Por exemplo:*/
    const frase = "Mergulhando em tecnologia com Alura";
/*Tamb√©m √© poss√≠vel combinar aspas simples 
e duplas quando a string cont√©m aspas internamente:
---------------------------------------------------------------------------------------------------------------------------*/
    console.log('Ela disse: "Adeus!"');
    console.log("Ela disse: 'Adeus!'");
/* -------------------------------------------------------------------------------------------------------------------------
ap√≥s definida, a string √© imut√°vel, ou seja, n√£o pode ter seu valor 
alterado. Sempre que manipulamos uma string, uma nova inst√¢ncia √© 
criada por baixo dos panos, gerando um novo espa√ßo na mem√≥ria com
 uma c√≥pia do valor da string. Portanto, √© necess√°rio armazen√°-la 
 em uma vari√°vel.
Al√©m disso, o JavaScript oferece o objeto String, 
que permite criar ou converter um tipo em uma string. Por exemplo:*/
    const numero = 256;
    const convertidoEmString = new String(numero);
    /*Para manipular strings, podemos usar m√©todos como length 
    (que retorna o tamanho da string), charAt (para acessar caracteres),
     indexOf (para buscar substrings) e muitos outros123. üöÄ*/

     /*---------------------------------------------------------------------------------------------------------------
     Template Strings (ou template literals) s√£o uma forma mais flex√≠vel e leg√≠vel de criar strings. 
     Elas permitem a interpola√ß√£o de express√µes 
     diretamente no corpo da string. Aqui est√£o alguns pontos importantes:
Sintaxe:
As template strings s√£o envolvidas por acentos graves (` `), em vez de aspas simples ou duplas.
Elas podem possuir placeholders, indicados por um cifr√£o seguido de chaves (${expression}).
As express√µes nos placeholders, bem como o texto em volta delas, s√£o passadas a uma fun√ß√£o. 
A fun√ß√£o padr√£o apenas concatena as partes em uma √∫nica string.
Exemplo:*/
    const nome = "Mundo";
    const saudacao = `Ol√°, ${nome}!`;
/*Strings Multi-linhas:
Qualquer caractere de nova linha inserido no c√≥digo √© parte da template string.
Antes, com strings normais, precis√°vamos usar a sintaxe abaixo para obter strings multi-linhas:*/
    console.log("texto string linha 1\\n" + "texto string linha 2");
    // Sa√≠da: "texto string linha 1
    // texto string linha 2"
    /* Agora, com template strings, podemos escrever*/
    console.log(`texto string linha 1
    texto string linha 2`);
    // Sa√≠da: "texto string linha 1
    // texto string linha 2"
/*Interpola√ß√£o de Express√µes:
Antes, para encapsular express√µes dentro de strings, us√°vamos a seguinte sintaxe*/
    const a = 5;
    const b = 10;
    console.log("Quinze √© " + (a + b) + " e n√£o " + (2 * a + b) + ".");
    // Sa√≠da: "Quinze √© 15 e n√£o 20."
/*Tagged Template Strings:
Uma forma mais avan√ßada dos template strings s√£o os tagged template strings.
Com eles, voc√™ pode modificar a sa√≠da dos template strings usando uma fun√ß√£o.
O primeiro argumento cont√©m um array de literais (‚ÄúHello‚Äù e ‚ÄúWorld‚Äù no exemplo abaixo), 
e os argumentos subsequentes cont√™m valores previamente processados pelas express√µes de substitui√ß√£o.
No final, a fun√ß√£o retorna a string j√° manipulada*/
    function tag(strings, ...values) {
        console.log(strings[0]); // "Hello "
        console.log(strings[1]); // " world "
        console.log(values[0]); // 15
        console.log(values[1]); // 50
        return "Bazinga!";
    }
    tag`Hello ${a + b} world ${a * b}`;
    // Sa√≠da: "Bazinga!"

/*Strings Raw:
A propriedade especial raw, dispon√≠vel no primeiro argumento da fun√ß√£o da tagged template string, 
permite o acesso √†s strings de maneira pura (raw), exatamente como foram especificadas.
Concatena√ß√£o de Strings:
A concatena√ß√£o tradicional usa o sinal de +.
Exemplo:*/
    //let nome = "Mundo";
    //let saudacao = "Ol√°, " + nome + "!";

/*Com template strings, podemos fazer isso de forma mais leg√≠vel*/
    //let nome = "Mundo";
    //let saudacao = `Ol√°, ${nome}!`;


